if(typeof KJUR=="undefined"||!KJUR)KJUR={};if(typeof KJUR.crypto=="undefined"||!KJUR.crypto)KJUR.crypto={};KJUR.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"};this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa"};this.CRYPTOJSMESSAGEDIGESTNAME={md5:CryptoJS.algo.MD5,sha1:CryptoJS.algo.SHA1,sha224:CryptoJS.algo.SHA224,sha256:CryptoJS.algo.SHA256,sha384:CryptoJS.algo.SHA384,sha512:CryptoJS.algo.SHA512,ripemd160:CryptoJS.algo.RIPEMD160};this.getDigestInfoHex=function(hHash,alg){if(typeof this.DIGESTINFOHEAD[alg]=="undefined")throw"alg not supported in Util.DIGESTINFOHEAD: "+alg;return this.DIGESTINFOHEAD[alg]+hHash};this.getPaddedDigestInfoHex=function(hHash,alg,keySize){var hDigestInfo=this.getDigestInfoHex(hHash,alg);var pmStrLen=keySize/4;if(hDigestInfo.length+22>pmStrLen)throw"key is too short for SigAlg: keylen="+keySize+","+alg;var hHead="0001";var hTail="00"+hDigestInfo;var hMid="";var fLen=pmStrLen-hHead.length-hTail.length;for(var i=0;i<fLen;i+=2){hMid+="ff"}var hPaddedMessage=hHead+hMid+hTail;return hPaddedMessage};this.hashString=function(s,alg){var md=new KJUR.crypto.MessageDigest({alg:alg});return md.digestString(s)};this.hashHex=function(sHex,alg){var md=new KJUR.crypto.MessageDigest({alg:alg});return md.digestHex(sHex)};this.sha1=function(s){var md=new KJUR.crypto.MessageDigest({alg:"sha1",prov:"cryptojs"});return md.digestString(s)};this.sha256=function(s){var md=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return md.digestString(s)};this.sha256Hex=function(s){var md=new KJUR.crypto.MessageDigest({alg:"sha256",prov:"cryptojs"});return md.digestHex(s)};this.sha512=function(s){var md=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return md.digestString(s)};this.sha512Hex=function(s){var md=new KJUR.crypto.MessageDigest({alg:"sha512",prov:"cryptojs"});return md.digestHex(s)}};KJUR.crypto.Util.md5=function(s){var md=new KJUR.crypto.MessageDigest({alg:"md5",prov:"cryptojs"});return md.digestString(s)};KJUR.crypto.Util.ripemd160=function(s){var md=new KJUR.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"});return md.digestString(s)};KJUR.crypto.Util.SECURERANDOMGEN=new SecureRandom;KJUR.crypto.Util.getRandomHexOfNbytes=function(n){var ba=new Array(n);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(ba);return BAtohex(ba)};KJUR.crypto.Util.getRandomBigIntegerOfNbytes=function(n){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(n),16)};KJUR.crypto.Util.getRandomHexOfNbits=function(n){var n_remainder=n%8;var n_quotient=(n-n_remainder)/8;var ba=new Array(n_quotient+1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(ba);ba[0]=(255<<n_remainder&255^255)&ba[0];return BAtohex(ba)};KJUR.crypto.Util.getRandomBigIntegerOfNbits=function(n){return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(n),16)};KJUR.crypto.Util.getRandomBigIntegerZeroToMax=function(biMax){var bitLenMax=biMax.bitLength();while(1){var biRand=KJUR.crypto.Util.getRandomBigIntegerOfNbits(bitLenMax);if(biMax.compareTo(biRand)!=-1)return biRand}};KJUR.crypto.Util.getRandomBigIntegerMinToMax=function(biMin,biMax){var flagCompare=biMin.compareTo(biMax);if(flagCompare==1)throw"biMin is greater than biMax";if(flagCompare==0)return biMin;var biDiff=biMax.subtract(biMin);var biRand=KJUR.crypto.Util.getRandomBigIntegerZeroToMax(biDiff);return biRand.add(biMin)};KJUR.crypto.MessageDigest=function(params){var md=null;var algName=null;var provName=null;this.setAlgAndProvider=function(alg,prov){alg=KJUR.crypto.MessageDigest.getCanonicalAlgName(alg);if(alg!==null&&prov===undefined)prov=KJUR.crypto.Util.DEFAULTPROVIDER[alg];if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(alg)!=-1&&prov=="cryptojs"){try{this.md=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[alg].create()}catch(ex){throw"setAlgAndProvider hash alg set fail alg="+alg+"/"+ex}this.updateString=function(str){this.md.update(str)};this.updateHex=function(hex){var wHex=CryptoJS.enc.Hex.parse(hex);this.md.update(wHex)};this.digest=function(){var hash=this.md.finalize();return hash.toString(CryptoJS.enc.Hex)};this.digestString=function(str){this.updateString(str);return this.digest()};this.digestHex=function(hex){this.updateHex(hex);return this.digest()}}if(":sha256:".indexOf(alg)!=-1&&prov=="sjcl"){try{this.md=new sjcl.hash.sha256}catch(ex){throw"setAlgAndProvider hash alg set fail alg="+alg+"/"+ex}this.updateString=function(str){this.md.update(str)};this.updateHex=function(hex){var baHex=sjcl.codec.hex.toBits(hex);this.md.update(baHex)};this.digest=function(){var hash=this.md.finalize();return sjcl.codec.hex.fromBits(hash)};this.digestString=function(str){this.updateString(str);return this.digest()};this.digestHex=function(hex){this.updateHex(hex);return this.digest()}}};this.updateString=function(str){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.updateHex=function(hex){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestString=function(str){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName};this.digestHex=function(hex){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName};if(params!==undefined){if(params["alg"]!==undefined){this.algName=params["alg"];if(params["prov"]===undefined)this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.MessageDigest.getCanonicalAlgName=function(alg){if(typeof alg==="string"){alg=alg.toLowerCase();alg=alg.replace(/-/,"")}return alg};KJUR.crypto.MessageDigest.getHashLength=function(alg){var MD=KJUR.crypto.MessageDigest;var alg2=MD.getCanonicalAlgName(alg);if(MD.HASHLENGTH[alg2]===undefined)throw"not supported algorithm: "+alg;return MD.HASHLENGTH[alg2]};KJUR.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20};KJUR.crypto.Mac=function(params){var mac=null;var pass=null;var algName=null;var provName=null;var algProv=null;this.setAlgAndProvider=function(alg,prov){alg=alg.toLowerCase();if(alg==null)alg="hmacsha1";alg=alg.toLowerCase();if(alg.substr(0,4)!="hmac"){throw"setAlgAndProvider unsupported HMAC alg: "+alg}if(prov===undefined)prov=KJUR.crypto.Util.DEFAULTPROVIDER[alg];this.algProv=alg+"/"+prov;var hashAlg=alg.substr(4);if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(hashAlg)!=-1&&prov=="cryptojs"){try{var mdObj=KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[hashAlg];this.mac=CryptoJS.algo.HMAC.create(mdObj,this.pass)}catch(ex){throw"setAlgAndProvider hash alg set fail hashAlg="+hashAlg+"/"+ex}this.updateString=function(str){this.mac.update(str)};this.updateHex=function(hex){var wHex=CryptoJS.enc.Hex.parse(hex);this.mac.update(wHex)};this.doFinal=function(){var hash=this.mac.finalize();return hash.toString(CryptoJS.enc.Hex)};this.doFinalString=function(str){this.updateString(str);return this.doFinal()};this.doFinalHex=function(hex){this.updateHex(hex);return this.doFinal()}}};this.updateString=function(str){throw"updateString(str) not supported for this alg/prov: "+this.algProv};this.updateHex=function(hex){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv};this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv};this.doFinalString=function(str){throw"digestString(str) not supported for this alg/prov: "+this.algProv};this.doFinalHex=function(hex){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv};this.setPassword=function(pass){if(typeof pass=="string"){var hPass=pass;if(pass.length%2==1||!pass.match(/^[0-9A-Fa-f]+$/)){hPass=rstrtohex(pass)}this.pass=CryptoJS.enc.Hex.parse(hPass);return}if(typeof pass!="object")throw"KJUR.crypto.Mac unsupported password type: "+pass;var hPass=null;if(pass.hex!==undefined){if(pass.hex.length%2!=0||!pass.hex.match(/^[0-9A-Fa-f]+$/))throw"Mac: wrong hex password: "+pass.hex;hPass=pass.hex}if(pass.utf8!==undefined)hPass=utf8tohex(pass.utf8);if(pass.rstr!==undefined)hPass=rstrtohex(pass.rstr);if(pass.b64!==undefined)hPass=b64tohex(pass.b64);if(pass.b64u!==undefined)hPass=b64utohex(pass.b64u);if(hPass==null)throw"KJUR.crypto.Mac unsupported password type: "+pass;this.pass=CryptoJS.enc.Hex.parse(hPass)};if(params!==undefined){if(params.pass!==undefined){this.setPassword(params.pass)}if(params.alg!==undefined){this.algName=params.alg;if(params["prov"]===undefined)this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];this.setAlgAndProvider(this.algName,this.provName)}}};KJUR.crypto.Signature=function(params){var prvKey=null;var pubKey=null;var md=null;var sig=null;var algName=null;var provName=null;var algProvName=null;var mdAlgName=null;var pubkeyAlgName=null;var state=null;var pssSaltLen=-1;var initParams=null;var sHashHex=null;var hDigestInfo=null;var hPaddedDigestInfo=null;var hSign=null;this._setAlgNames=function(){var matchResult=this.algName.match(/^(.+)with(.+)$/);if(matchResult){this.mdAlgName=matchResult[1].toLowerCase();this.pubkeyAlgName=matchResult[2].toLowerCase()}};this._zeroPaddingOfSignature=function(hex,bitLength){var s="";var nZero=bitLength/4-hex.length;for(var i=0;i<nZero;i++){s=s+"0"}return s+hex};this.setAlgAndProvider=function(alg,prov){this._setAlgNames();if(prov!="cryptojs/jsrsa")throw"provider not supported: "+prov;if(":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)!=-1){try{this.md=new KJUR.crypto.MessageDigest({alg:this.mdAlgName})}catch(ex){throw"setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+ex}this.init=function(keyparam,pass){var keyObj=null;try{if(pass===undefined){keyObj=KEYUTIL.getKey(keyparam)}else{keyObj=KEYUTIL.getKey(keyparam,pass)}}catch(ex){throw"init failed:"+ex}if(keyObj.isPrivate===true){this.prvKey=keyObj;this.state="SIGN"}else if(keyObj.isPublic===true){this.pubKey=keyObj;this.state="VERIFY"}else{throw"init failed.:"+keyObj}};this.updateString=function(str){this.md.updateString(str)};this.updateHex=function(hex){this.md.updateHex(hex)};this.sign=function(){this.sHashHex=this.md.digest();if(typeof this.ecprvhex!="undefined"&&typeof this.eccurvename!="undefined"){var ec=new KJUR.crypto.ECDSA({curve:this.eccurvename});this.hSign=ec.signHex(this.sHashHex,this.ecprvhex)}else if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen)}else if(this.prvKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName)}else if(this.prvKey instanceof KJUR.crypto.ECDSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else if(this.prvKey instanceof KJUR.crypto.DSA){this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}else{throw"Signature: unsupported private key alg: "+this.pubkeyAlgName}return this.hSign};this.signString=function(str){this.updateString(str);return this.sign()};this.signHex=function(hex){this.updateHex(hex);return this.sign()};this.verify=function(hSigVal){this.sHashHex=this.md.digest();if(typeof this.ecpubhex!="undefined"&&typeof this.eccurvename!="undefined"){var ec=new KJUR.crypto.ECDSA({curve:this.eccurvename});return ec.verifyHex(this.sHashHex,hSigVal,this.ecpubhex)}else if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsaandmgf1"){return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,hSigVal,this.mdAlgName,this.pssSaltLen)}else if(this.pubKey instanceof RSAKey&&this.pubkeyAlgName==="rsa"){return this.pubKey.verifyWithMessageHash(this.sHashHex,hSigVal)}else if(KJUR.crypto.ECDSA!==undefined&&this.pubKey instanceof KJUR.crypto.ECDSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,hSigVal)}else if(KJUR.crypto.DSA!==undefined&&this.pubKey instanceof KJUR.crypto.DSA){return this.pubKey.verifyWithMessageHash(this.sHashHex,hSigVal)}else{throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}}};this.init=function(key,pass){throw"init(key, pass) not supported for this alg:prov="+this.algProvName};this.updateString=function(str){throw"updateString(str) not supported for this alg:prov="+this.algProvName};this.updateHex=function(hex){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName};this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName};this.signString=function(str){throw"digestString(str) not supported for this alg:prov="+this.algProvName};this.signHex=function(hex){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName};this.verify=function(hSigVal){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName};this.initParams=params;if(params!==undefined){if(params.alg!==undefined){this.algName=params.alg;if(params.prov===undefined){this.provName=KJUR.crypto.Util.DEFAULTPROVIDER[this.algName]}else{this.provName=params.prov}this.algProvName=this.algName+":"+this.provName;this.setAlgAndProvider(this.algName,this.provName);this._setAlgNames()}if(params["psssaltlen"]!==undefined)this.pssSaltLen=params["psssaltlen"];if(params.prvkeypem!==undefined){if(params.prvkeypas!==undefined){throw"both prvkeypem and prvkeypas parameters not supported"}else{try{var prvKey=KEYUTIL.getKey(params.prvkeypem);this.init(prvKey)}catch(ex){throw"fatal error to load pem private key: "+ex}}}}};KJUR.crypto.Cipher=function(params){};KJUR.crypto.Cipher.encrypt=function(s,keyObj,algName){if(keyObj instanceof RSAKey&&keyObj.isPublic){var algName2=KJUR.crypto.Cipher.getAlgByKeyAndName(keyObj,algName);if(algName2==="RSA")return keyObj.encrypt(s);if(algName2==="RSAOAEP")return keyObj.encryptOAEP(s,"sha1");var a=algName2.match(/^RSAOAEP(\d+)$/);if(a!==null)return keyObj.encryptOAEP(s,"sha"+a[1]);throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+algName}else{throw"Cipher.encrypt: unsupported key or algorithm"}};KJUR.crypto.Cipher.decrypt=function(hex,keyObj,algName){if(keyObj instanceof RSAKey&&keyObj.isPrivate){var algName2=KJUR.crypto.Cipher.getAlgByKeyAndName(keyObj,algName);if(algName2==="RSA")return keyObj.decrypt(hex);if(algName2==="RSAOAEP")return keyObj.decryptOAEP(hex,"sha1");var a=algName2.match(/^RSAOAEP(\d+)$/);if(a!==null)return keyObj.decryptOAEP(hex,"sha"+a[1]);throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+algName}else{throw"Cipher.decrypt: unsupported key or algorithm"}};KJUR.crypto.Cipher.getAlgByKeyAndName=function(keyObj,algName){if(keyObj instanceof RSAKey){if(":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(algName)!=-1)return algName;if(algName===null||algName===undefined)return"RSA";throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+algName}throw"getAlgByKeyAndName: not supported algorithm name: "+algName};KJUR.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040023":"secp521r1","2b81040022":"secp384r1","2b81040023":"secp521r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA"}};